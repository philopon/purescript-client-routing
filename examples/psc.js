// Generated by psc version 0.6.8
var PS = PS || {};
PS.Prelude = (function () {
    "use strict";
    
    function cons(e) {
      return function(l) {
        return [e].concat(l);
      };
    }
    ;
    
    function showNumberImpl(n) {
      return n.toString();
    }
    ;
    
    function numAdd(n1) {
      return function(n2) {
        return n1 + n2;
      };
    }
    ;
    
    function numMul(n1) {
      return function(n2) {
        return n1 * n2;
      };
    }
    ;
    
    function refEq(r1) {
      return function(r2) {
        return r1 === r2;
      };
    }
    ;
    
    function refIneq(r1) {
      return function(r2) {
        return r1 !== r2;
      };
    }
    ;
    
    function concatString(s1) {
      return function(s2) {
        return s1 + s2;
      };
    }
    ;
    var Unit = function (x) {
        return x;
    };
    var Semigroupoid = function ($less$less$less) {
        this["<<<"] = $less$less$less;
    };
    var Category = function (__superclass_Prelude$dotSemigroupoid_0, id) {
        this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
        this.id = id;
    };
    var Show = function (show) {
        this.show = show;
    };
    var Functor = function ($less$dollar$greater) {
        this["<$>"] = $less$dollar$greater;
    };
    var Apply = function ($less$times$greater, __superclass_Prelude$dotFunctor_0) {
        this["<*>"] = $less$times$greater;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    };
    var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
        this.pure = pure;
    };
    var Bind = function ($greater$greater$eq, __superclass_Prelude$dotApply_0) {
        this[">>="] = $greater$greater$eq;
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
    };
    var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
        this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
        this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
    };
    
    /**
     *  | Addition and multiplication
     */
    var Semiring = function ($times, $plus, one, zero) {
        this["*"] = $times;
        this["+"] = $plus;
        this.one = one;
        this.zero = zero;
    };
    var Eq = function ($div$eq, $eq$eq) {
        this["/="] = $div$eq;
        this["=="] = $eq$eq;
    };
    var Semigroup = function ($less$greater) {
        this["<>"] = $less$greater;
    };
    var $greater$greater$eq = function (dict) {
        return dict[">>="];
    };
    var $eq$eq = function (dict) {
        return dict["=="];
    };
    var $less$greater = function (dict) {
        return dict["<>"];
    };
    var $less$times$greater = function (dict) {
        return dict["<*>"];
    };
    var $less$dollar$greater = function (dict) {
        return dict["<$>"];
    };
    var $colon = cons;
    var $plus$plus = function (__dict_Semigroup_2) {
        return $less$greater(__dict_Semigroup_2);
    };
    
    /**
     *  | Addition and multiplication
     */
    var $plus = function (dict) {
        return dict["+"];
    };
    var $dollar = function (f) {
        return function (x) {
            return f(x);
        };
    };
    var unit = {};
    var showNumber = new Show(showNumberImpl);
    var show = function (dict) {
        return dict.show;
    };
    var semiringNumber = new Semiring(numMul, numAdd, 1, 0);
    var semigroupoidArr = new Semigroupoid(function (f) {
        return function (g) {
            return function (x) {
                return f(g(x));
            };
        };
    });
    var semigroupString = new Semigroup(concatString);
    var pure = function (dict) {
        return dict.pure;
    };
    var $$return = function (__dict_Monad_5) {
        return pure(__dict_Monad_5["__superclass_Prelude.Applicative_0"]());
    };
    var liftA1 = function (__dict_Applicative_8) {
        return function (f) {
            return function (a) {
                return $less$times$greater(__dict_Applicative_8["__superclass_Prelude.Apply_0"]())(pure(__dict_Applicative_8)(f))(a);
            };
        };
    };
    var id = function (dict) {
        return dict.id;
    };
    var eqString = new Eq(refIneq, refEq);
    var categoryArr = new Category(function () {
        return semigroupoidArr;
    }, function (x) {
        return x;
    });
    var ap = function (__dict_Monad_16) {
        return function (f) {
            return function (a) {
                return $greater$greater$eq(__dict_Monad_16["__superclass_Prelude.Bind_1"]())(f)(function (_2) {
                    return $greater$greater$eq(__dict_Monad_16["__superclass_Prelude.Bind_1"]())(a)(function (_1) {
                        return $$return(__dict_Monad_16)(_2(_1));
                    });
                });
            };
        };
    };
    return {
        Unit: Unit, 
        Semigroup: Semigroup, 
        Eq: Eq, 
        Semiring: Semiring, 
        Monad: Monad, 
        Bind: Bind, 
        Applicative: Applicative, 
        Apply: Apply, 
        Functor: Functor, 
        Show: Show, 
        Category: Category, 
        Semigroupoid: Semigroupoid, 
        unit: unit, 
        "++": $plus$plus, 
        "<>": $less$greater, 
        refIneq: refIneq, 
        refEq: refEq, 
        "==": $eq$eq, 
        "+": $plus, 
        ap: ap, 
        "return": $$return, 
        ">>=": $greater$greater$eq, 
        liftA1: liftA1, 
        pure: pure, 
        "<*>": $less$times$greater, 
        "<$>": $less$dollar$greater, 
        show: show, 
        cons: cons, 
        ":": $colon, 
        "$": $dollar, 
        id: id, 
        semigroupoidArr: semigroupoidArr, 
        categoryArr: categoryArr, 
        showNumber: showNumber, 
        semiringNumber: semiringNumber, 
        eqString: eqString, 
        semigroupString: semigroupString
    };
})();
var PS = PS || {};
PS.Network_Routing_Client_Foreign = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
var director = (function(exports){


//
// Generated on Sat Dec 06 2014 16:08:09 GMT-0500 (EST) by Charlie Robbins, Paolo Fragomeni & the Contributors (Using Codesurgeon).
// Version 1.2.4
//

(function (exports) {

/*
 * browser.js: Browser specific functionality for director.
 *
 * (C) 2011, Charlie Robbins, Paolo Fragomeni, & the Contributors.
 * MIT LICENSE
 *
 */

var dloc = document.location;

function dlocHashEmpty() {
  // Non-IE browsers return '' when the address bar shows '#'; Director's logic
  // assumes both mean empty.
  return dloc.hash === '' || dloc.hash === '#';
}

var listener = {
  mode: 'modern',
  hash: dloc.hash,
  history: false,

  check: function () {
    var h = dloc.hash;
    if (h != this.hash) {
      this.hash = h;
      this.onHashChanged();
    }
  },

  fire: function () {
    if (this.mode === 'modern') {
      this.history === true ? window.onpopstate() : window.onhashchange();
    }
    else {
      this.onHashChanged();
    }
  },

  init: function (fn, history) {
    var self = this;
    this.history = history;

    if (!Router.listeners) {
      Router.listeners = [];
    }

    function onchange(onChangeEvent) {
      for (var i = 0, l = Router.listeners.length; i < l; i++) {
        Router.listeners[i](onChangeEvent);
      }
    }

    //note IE8 is being counted as 'modern' because it has the hashchange event
    if ('onhashchange' in window && (document.documentMode === undefined
      || document.documentMode > 7)) {
      // At least for now HTML5 history is available for 'modern' browsers only
      if (this.history === true) {
        // There is an old bug in Chrome that causes onpopstate to fire even
        // upon initial page load. Since the handler is run manually in init(),
        // this would cause Chrome to run it twise. Currently the only
        // workaround seems to be to set the handler after the initial page load
        // http://code.google.com/p/chromium/issues/detail?id=63040
        setTimeout(function() {
          window.onpopstate = onchange;
        }, 500);
      }
      else {
        window.onhashchange = onchange;
      }
      this.mode = 'modern';
    }
    else {
      //
      // IE support, based on a concept by Erik Arvidson ...
      //
      var frame = document.createElement('iframe');
      frame.id = 'state-frame';
      frame.style.display = 'none';
      document.body.appendChild(frame);
      this.writeFrame('');

      if ('onpropertychange' in document && 'attachEvent' in document) {
        document.attachEvent('onpropertychange', function () {
          if (event.propertyName === 'location') {
            self.check();
          }
        });
      }

      window.setInterval(function () { self.check(); }, 50);

      this.onHashChanged = onchange;
      this.mode = 'legacy';
    }

    Router.listeners.push(fn);

    return this.mode;
  },

  destroy: function (fn) {
    if (!Router || !Router.listeners) {
      return;
    }

    var listeners = Router.listeners;

    for (var i = listeners.length - 1; i >= 0; i--) {
      if (listeners[i] === fn) {
        listeners.splice(i, 1);
      }
    }
  },

  setHash: function (s) {
    // Mozilla always adds an entry to the history
    if (this.mode === 'legacy') {
      this.writeFrame(s);
    }

    if (this.history === true) {
      window.history.pushState({}, document.title, s);
      // Fire an onpopstate event manually since pushing does not obviously
      // trigger the pop event.
      this.fire();
    } else {
      dloc.hash = (s[0] === '/') ? s : '/' + s;
    }
    return this;
  },

  writeFrame: function (s) {
    // IE support...
    var f = document.getElementById('state-frame');
    var d = f.contentDocument || f.contentWindow.document;
    d.open();
    d.write("<script>_hash = '" + s + "'; onload = parent.listener.syncHash;<script>");
    d.close();
  },

  syncHash: function () {
    // IE support...
    var s = this._hash;
    if (s != dloc.hash) {
      dloc.hash = s;
    }
    return this;
  },

  onHashChanged: function () {}
};

var Router = exports.Router = function (routes) {
  if (!(this instanceof Router)) return new Router(routes);

  this.params   = {};
  this.routes   = {};
  this.methods  = ['on', 'once', 'after', 'before'];
  this.scope    = [];
  this._methods = {};

  this._insert = this.insert;
  this.insert = this.insertEx;

  this.historySupport = (window.history != null ? window.history.pushState : null) != null

  this.configure();
  this.mount(routes || {});
};

Router.prototype.init = function (r) {
  var self = this
    , routeTo;
  this.handler = function(onChangeEvent) {
    var newURL = onChangeEvent && onChangeEvent.newURL || window.location.hash;
    var url = self.history === true ? self.getPath() : newURL.replace(/.*#/, '');
    self.dispatch('on', url.charAt(0) === '/' ? url : '/' + url);
  };

  listener.init(this.handler, this.history);

  if (this.history === false) {
    if (dlocHashEmpty() && r) {
      dloc.hash = r;
    } else if (!dlocHashEmpty()) {
      self.dispatch('on', '/' + dloc.hash.replace(/^(#\/|#|\/)/, ''));
    }
  }
  else {
    if (this.convert_hash_in_init) {
      // Use hash as route
      routeTo = dlocHashEmpty() && r ? r : !dlocHashEmpty() ? dloc.hash.replace(/^#/, '') : null;
      if (routeTo) {
        window.history.replaceState({}, document.title, routeTo);
      }
    }
    else {
      // Use canonical url
      routeTo = this.getPath();
    }

    // Router has been initialized, but due to the chrome bug it will not
    // yet actually route HTML5 history state changes. Thus, decide if should route.
    if (routeTo || this.run_in_init === true) {
      this.handler();
    }
  }

  return this;
};

Router.prototype.explode = function () {
  var v = this.history === true ? this.getPath() : dloc.hash;
  if (v.charAt(1) === '/') { v=v.slice(1) }
  return v.slice(1, v.length).split("/");
};

Router.prototype.setRoute = function (i, v, val) {
  var url = this.explode();

  if (typeof i === 'number' && typeof v === 'string') {
    url[i] = v;
  }
  else if (typeof val === 'string') {
    url.splice(i, v, s);
  }
  else {
    url = [i];
  }

  listener.setHash(url.join('/'));
  return url;
};

//
// ### function insertEx(method, path, route, parent)
// #### @method {string} Method to insert the specific `route`.
// #### @path {Array} Parsed path to insert the `route` at.
// #### @route {Array|function} Route handlers to insert.
// #### @parent {Object} **Optional** Parent "routes" to insert into.
// insert a callback that will only occur once per the matched route.
//
Router.prototype.insertEx = function(method, path, route, parent) {
  if (method === "once") {
    method = "on";
    route = function(route) {
      var once = false;
      return function() {
        if (once) return;
        once = true;
        return route.apply(this, arguments);
      };
    }(route);
  }
  return this._insert(method, path, route, parent);
};

Router.prototype.getRoute = function (v) {
  var ret = v;

  if (typeof v === "number") {
    ret = this.explode()[v];
  }
  else if (typeof v === "string"){
    var h = this.explode();
    ret = h.indexOf(v);
  }
  else {
    ret = this.explode();
  }

  return ret;
};

Router.prototype.destroy = function () {
  listener.destroy(this.handler);
  return this;
};

Router.prototype.getPath = function () {
  var path = window.location.pathname;
  if (path.substr(0, 1) !== '/') {
    path = '/' + path;
  }
  return path;
};
function _every(arr, iterator) {
  for (var i = 0; i < arr.length; i += 1) {
    if (iterator(arr[i], i, arr) === false) {
      return;
    }
  }
}

function _flatten(arr) {
  var flat = [];
  for (var i = 0, n = arr.length; i < n; i++) {
    flat = flat.concat(arr[i]);
  }
  return flat;
}

function _asyncEverySeries(arr, iterator, callback) {
  if (!arr.length) {
    return callback();
  }
  var completed = 0;
  (function iterate() {
    iterator(arr[completed], function(err) {
      if (err || err === false) {
        callback(err);
        callback = function() {};
      } else {
        completed += 1;
        if (completed === arr.length) {
          callback();
        } else {
          iterate();
        }
      }
    });
  })();
}

function paramifyString(str, params, mod) {
  mod = str;
  for (var param in params) {
    if (params.hasOwnProperty(param)) {
      mod = params[param](str);
      if (mod !== str) {
        break;
      }
    }
  }
  return mod === str ? "([._a-zA-Z0-9-]+)" : mod;
}

function regifyString(str, params) {
  var matches, last = 0, out = "";
  while (matches = str.substr(last).match(/[^\w\d\- %@&]*\*[^\w\d\- %@&]*/)) {
    last = matches.index + matches[0].length;
    matches[0] = matches[0].replace(/^\*/, "([_.()!\\ %@&a-zA-Z0-9-]+)");
    out += str.substr(0, matches.index) + matches[0];
  }
  str = out += str.substr(last);
  var captures = str.match(/:([^\/]+)/ig), capture, length;
  if (captures) {
    length = captures.length;
    for (var i = 0; i < length; i++) {
      capture = captures[i];
      if (capture.slice(0, 2) === "::") {
        str = capture.slice(1);
      } else {
        str = str.replace(capture, paramifyString(capture, params));
      }
    }
  }
  return str;
}

function terminator(routes, delimiter, start, stop) {
  var last = 0, left = 0, right = 0, start = (start || "(").toString(), stop = (stop || ")").toString(), i;
  for (i = 0; i < routes.length; i++) {
    var chunk = routes[i];
    if (chunk.indexOf(start, last) > chunk.indexOf(stop, last) || ~chunk.indexOf(start, last) && !~chunk.indexOf(stop, last) || !~chunk.indexOf(start, last) && ~chunk.indexOf(stop, last)) {
      left = chunk.indexOf(start, last);
      right = chunk.indexOf(stop, last);
      if (~left && !~right || !~left && ~right) {
        var tmp = routes.slice(0, (i || 1) + 1).join(delimiter);
        routes = [ tmp ].concat(routes.slice((i || 1) + 1));
      }
      last = (right > left ? right : left) + 1;
      i = 0;
    } else {
      last = 0;
    }
  }
  return routes;
}

var QUERY_SEPARATOR = /\?.*/;

Router.prototype.configure = function(options) {
  options = options || {};
  for (var i = 0; i < this.methods.length; i++) {
    this._methods[this.methods[i]] = true;
  }
  this.recurse = options.recurse || this.recurse || false;
  this.async = options.async || false;
  this.delimiter = options.delimiter || "/";
  this.strict = typeof options.strict === "undefined" ? true : options.strict;
  this.notfound = options.notfound;
  this.resource = options.resource;
  this.history = options.html5history && this.historySupport || false;
  this.run_in_init = this.history === true && options.run_handler_in_init !== false;
  this.convert_hash_in_init = this.history === true && options.convert_hash_in_init !== false;
  this.every = {
    after: options.after || null,
    before: options.before || null,
    on: options.on || null
  };
  return this;
};

Router.prototype.param = function(token, matcher) {
  if (token[0] !== ":") {
    token = ":" + token;
  }
  var compiled = new RegExp(token, "g");
  this.params[token] = function(str) {
    return str.replace(compiled, matcher.source || matcher);
  };
  return this;
};

Router.prototype.on = Router.prototype.route = function(method, path, route) {
  var self = this;
  if (!route && typeof path == "function") {
    route = path;
    path = method;
    method = "on";
  }
  if (Array.isArray(path)) {
    return path.forEach(function(p) {
      self.on(method, p, route);
    });
  }
  if (path.source) {
    path = path.source.replace(/\\\//ig, "/");
  }
  if (Array.isArray(method)) {
    return method.forEach(function(m) {
      self.on(m.toLowerCase(), path, route);
    });
  }
  path = path.split(new RegExp(this.delimiter));
  path = terminator(path, this.delimiter);
  this.insert(method, this.scope.concat(path), route);
};

Router.prototype.path = function(path, routesFn) {
  var self = this, length = this.scope.length;
  if (path.source) {
    path = path.source.replace(/\\\//ig, "/");
  }
  path = path.split(new RegExp(this.delimiter));
  path = terminator(path, this.delimiter);
  this.scope = this.scope.concat(path);
  routesFn.call(this, this);
  this.scope.splice(length, path.length);
};

Router.prototype.dispatch = function(method, path, callback) {
  var self = this, fns = this.traverse(method, path.replace(QUERY_SEPARATOR, ""), this.routes, ""), invoked = this._invoked, after;
  this._invoked = true;
  if (!fns || fns.length === 0) {
    this.last = [];
    if (typeof this.notfound === "function") {
      this.invoke([ this.notfound ], {
        method: method,
        path: path
      }, callback);
    }
    return false;
  }
  if (this.recurse === "forward") {
    fns = fns.reverse();
  }
  function updateAndInvoke() {
    self.last = fns.after;
    self.invoke(self.runlist(fns), self, callback);
  }
  after = this.every && this.every.after ? [ this.every.after ].concat(this.last) : [ this.last ];
  if (after && after.length > 0 && invoked) {
    if (this.async) {
      this.invoke(after, this, updateAndInvoke);
    } else {
      this.invoke(after, this);
      updateAndInvoke();
    }
    return true;
  }
  updateAndInvoke();
  return true;
};

Router.prototype.invoke = function(fns, thisArg, callback) {
  var self = this;
  var apply;
  if (this.async) {
    apply = function(fn, next) {
      if (Array.isArray(fn)) {
        return _asyncEverySeries(fn, apply, next);
      } else if (typeof fn == "function") {
        fn.apply(thisArg, (fns.captures || []).concat(next));
      }
    };
    _asyncEverySeries(fns, apply, function() {
      if (callback) {
        callback.apply(thisArg, arguments);
      }
    });
  } else {
    apply = function(fn) {
      if (Array.isArray(fn)) {
        return _every(fn, apply);
      } else if (typeof fn === "function") {
        return fn.apply(thisArg, fns.captures || []);
      } else if (typeof fn === "string" && self.resource) {
        self.resource[fn].apply(thisArg, fns.captures || []);
      }
    };
    _every(fns, apply);
  }
};

Router.prototype.traverse = function(method, path, routes, regexp, filter) {
  var fns = [], current, exact, match, next, that;
  function filterRoutes(routes) {
    if (!filter) {
      return routes;
    }
    function deepCopy(source) {
      var result = [];
      for (var i = 0; i < source.length; i++) {
        result[i] = Array.isArray(source[i]) ? deepCopy(source[i]) : source[i];
      }
      return result;
    }
    function applyFilter(fns) {
      for (var i = fns.length - 1; i >= 0; i--) {
        if (Array.isArray(fns[i])) {
          applyFilter(fns[i]);
          if (fns[i].length === 0) {
            fns.splice(i, 1);
          }
        } else {
          if (!filter(fns[i])) {
            fns.splice(i, 1);
          }
        }
      }
    }
    var newRoutes = deepCopy(routes);
    newRoutes.matched = routes.matched;
    newRoutes.captures = routes.captures;
    newRoutes.after = routes.after.filter(filter);
    applyFilter(newRoutes);
    return newRoutes;
  }
  if (path === this.delimiter && routes[method]) {
    next = [ [ routes.before, routes[method] ].filter(Boolean) ];
    next.after = [ routes.after ].filter(Boolean);
    next.matched = true;
    next.captures = [];
    return filterRoutes(next);
  }
  for (var r in routes) {
    if (routes.hasOwnProperty(r) && (!this._methods[r] || this._methods[r] && typeof routes[r] === "object" && !Array.isArray(routes[r]))) {
      current = exact = regexp + this.delimiter + r;
      if (!this.strict) {
        exact += "[" + this.delimiter + "]?";
      }
      match = path.match(new RegExp("^" + exact));
      if (!match) {
        continue;
      }
      if (match[0] && match[0] == path && routes[r][method]) {
        next = [ [ routes[r].before, routes[r][method] ].filter(Boolean) ];
        next.after = [ routes[r].after ].filter(Boolean);
        next.matched = true;
        next.captures = match.slice(1);
        if (this.recurse && routes === this.routes) {
          next.push([ routes.before, routes.on ].filter(Boolean));
          next.after = next.after.concat([ routes.after ].filter(Boolean));
        }
        return filterRoutes(next);
      }
      next = this.traverse(method, path, routes[r], current);
      if (next.matched) {
        if (next.length > 0) {
          fns = fns.concat(next);
        }
        if (this.recurse) {
          fns.push([ routes[r].before, routes[r].on ].filter(Boolean));
          next.after = next.after.concat([ routes[r].after ].filter(Boolean));
          if (routes === this.routes) {
            fns.push([ routes["before"], routes["on"] ].filter(Boolean));
            next.after = next.after.concat([ routes["after"] ].filter(Boolean));
          }
        }
        fns.matched = true;
        fns.captures = next.captures;
        fns.after = next.after;
        return filterRoutes(fns);
      }
    }
  }
  return false;
};

Router.prototype.insert = function(method, path, route, parent) {
  var methodType, parentType, isArray, nested, part;
  path = path.filter(function(p) {
    return p && p.length > 0;
  });
  parent = parent || this.routes;
  part = path.shift();
  if (/\:|\*/.test(part) && !/\\d|\\w/.test(part)) {
    part = regifyString(part, this.params);
  }
  if (path.length > 0) {
    parent[part] = parent[part] || {};
    return this.insert(method, path, route, parent[part]);
  }
  if (!part && !path.length && parent === this.routes) {
    methodType = typeof parent[method];
    switch (methodType) {
     case "function":
      parent[method] = [ parent[method], route ];
      return;
     case "object":
      parent[method].push(route);
      return;
     case "undefined":
      parent[method] = route;
      return;
    }
    return;
  }
  parentType = typeof parent[part];
  isArray = Array.isArray(parent[part]);
  if (parent[part] && !isArray && parentType == "object") {
    methodType = typeof parent[part][method];
    switch (methodType) {
     case "function":
      parent[part][method] = [ parent[part][method], route ];
      return;
     case "object":
      parent[part][method].push(route);
      return;
     case "undefined":
      parent[part][method] = route;
      return;
    }
  } else if (parentType == "undefined") {
    nested = {};
    nested[method] = route;
    parent[part] = nested;
    return;
  }
  throw new Error("Invalid route context: " + parentType);
};



Router.prototype.extend = function(methods) {
  var self = this, len = methods.length, i;
  function extend(method) {
    self._methods[method] = true;
    self[method] = function() {
      var extra = arguments.length === 1 ? [ method, "" ] : [ method ];
      self.on.apply(self, extra.concat(Array.prototype.slice.call(arguments)));
    };
  }
  for (i = 0; i < len; i++) {
    extend(methods[i]);
  }
};

Router.prototype.runlist = function(fns) {
  var runlist = this.every && this.every.before ? [ this.every.before ].concat(_flatten(fns)) : _flatten(fns);
  if (this.every && this.every.on) {
    runlist.push(this.every.on);
  }
  runlist.captures = fns.captures;
  runlist.source = fns.source;
  return runlist;
};

Router.prototype.mount = function(routes, path) {
  if (!routes || typeof routes !== "object" || Array.isArray(routes)) {
    return;
  }
  var self = this;
  path = path || [];
  if (!Array.isArray(path)) {
    path = path.split(self.delimiter);
  }
  function insertOrMount(route, local) {
    var rename = route, parts = route.split(self.delimiter), routeType = typeof routes[route], isRoute = parts[0] === "" || !self._methods[parts[0]], event = isRoute ? "on" : rename;
    if (isRoute) {
      rename = rename.slice((rename.match(new RegExp("^" + self.delimiter)) || [ "" ])[0].length);
      parts.shift();
    }
    if (isRoute && routeType === "object" && !Array.isArray(routes[route])) {
      local = local.concat(parts);
      self.mount(routes[route], local);
      return;
    }
    if (isRoute) {
      local = local.concat(rename.split(self.delimiter));
      local = terminator(local, self.delimiter);
    }
    self.insert(event, local, routes[route]);
  }
  for (var route in routes) {
    if (routes.hasOwnProperty(route)) {
      insertOrMount(route, path.slice(0));
    }
  }
};



}(typeof exports === "object" ? exports : window));
return exports.Router;
}({}));;
    return {
        director: director
    };
})();
var PS = PS || {};
PS.Data_Function = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
    function runFn2(fn) {
      return function(a) {
        return function(b) {
          return fn(a, b);
        };
      };
    }
    ;
    
    function runFn3(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return fn(a, b, c);
          };
        };
      };
    }
    ;
    return {
        runFn3: runFn3, 
        runFn2: runFn2
    };
})();
var PS = PS || {};
PS.Control_Monad_Eff = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
    function returnE(a) {
      return function() {
        return a;
      };
    }
    ;
    
    function bindE(a) {
      return function(f) {
        return function() {
          return f(a())();
        };
      };
    }
    ;
    var monadEff = new Prelude.Monad(function () {
        return applicativeEff;
    }, function () {
        return bindEff;
    });
    var bindEff = new Prelude.Bind(bindE, function () {
        return applyEff;
    });
    var applyEff = new Prelude.Apply(Prelude.ap(monadEff), function () {
        return functorEff;
    });
    var applicativeEff = new Prelude.Applicative(function () {
        return applyEff;
    }, returnE);
    var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
    return {
        bindE: bindE, 
        returnE: returnE, 
        functorEff: functorEff, 
        applyEff: applyEff, 
        applicativeEff: applicativeEff, 
        bindEff: bindEff, 
        monadEff: monadEff
    };
})();
var PS = PS || {};
PS.Debug_Trace = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    
    function trace(s) {
      return function() {
        console.log(s);
        return {};
      };
    }
    ;
    return {
        trace: trace
    };
})();
var PS = PS || {};
PS.Data_Maybe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Alt = PS.Control_Alt;
    var Control_Alternative = PS.Control_Alternative;
    var Control_Extend = PS.Control_Extend;
    var Control_MonadPlus = PS.Control_MonadPlus;
    var Control_Plus = PS.Control_Plus;
    var Nothing = (function () {
        function Nothing() {

        };
        Nothing.value = new Nothing();
        return Nothing;
    })();
    var Just = (function () {
        function Just(value0) {
            this.value0 = value0;
        };
        Just.create = function (value0) {
            return new Just(value0);
        };
        return Just;
    })();
    return {
        Nothing: Nothing, 
        Just: Just
    };
})();
var PS = PS || {};
PS.Data_Array = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    var Control_Alt = PS.Control_Alt;
    var Control_Plus = PS.Control_Plus;
    var Control_Alternative = PS.Control_Alternative;
    var Control_MonadPlus = PS.Control_MonadPlus;
    var Prelude_Unsafe = PS.Prelude_Unsafe;
    function map (f) {  return function (arr) {    var l = arr.length;    var result = new Array(l);    for (var i = 0; i < l; i++) {      result[i] = f(arr[i]);    }    return result;  };};
    var functorArray = new Prelude.Functor(map);
    return {
        map: map, 
        functorArray: functorArray
    };
})();
var PS = PS || {};
PS.Control_Monad_Eff_Class = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Monad_Trans = PS.Control_Monad_Trans;
    var Data_Monoid = PS.Data_Monoid;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Control_Monad_Maybe_Trans = PS.Control_Monad_Maybe_Trans;
    var Control_Monad_Error_Trans = PS.Control_Monad_Error_Trans;
    var Control_Monad_State_Trans = PS.Control_Monad_State_Trans;
    var Control_Monad_Writer_Trans = PS.Control_Monad_Writer_Trans;
    var Control_Monad_Reader_Trans = PS.Control_Monad_Reader_Trans;
    var Control_Monad_RWS_Trans = PS.Control_Monad_RWS_Trans;
    
    /**
     *  | The `MonadEff` class captures those monads which support native effects.
     *  |
     *  | Instances are provided for `Eff` itself, and the standard monad transformers.
     *  |
     *  | `liftEff` can be used in any appropriate monad transformer stack to lift an action
     *  | of type `Eff eff a` into the monad.
     *  |
     *  | Note that `MonadEff` is parameterized by the row of effects, so type inference can be
     *  | tricky. It is generally recommended to either work with a polymorphic row of effects,
     *  | or a concrete, closed row of effects such as `(trace :: Trace)`.
     */
    var MonadEff = function (__superclass_Prelude$dotMonad_0, liftEff) {
        this["__superclass_Prelude.Monad_0"] = __superclass_Prelude$dotMonad_0;
        this.liftEff = liftEff;
    };
    var monadEffEff = new MonadEff(function () {
        return Control_Monad_Eff.monadEff;
    }, Prelude.id(Prelude.categoryArr));
    
    /**
     *  | The `MonadEff` class captures those monads which support native effects.
     *  |
     *  | Instances are provided for `Eff` itself, and the standard monad transformers.
     *  |
     *  | `liftEff` can be used in any appropriate monad transformer stack to lift an action
     *  | of type `Eff eff a` into the monad.
     *  |
     *  | Note that `MonadEff` is parameterized by the row of effects, so type inference can be
     *  | tricky. It is generally recommended to either work with a polymorphic row of effects,
     *  | or a concrete, closed row of effects such as `(trace :: Trace)`.
     */
    var liftEff = function (dict) {
        return dict.liftEff;
    };
    return {
        MonadEff: MonadEff, 
        liftEff: liftEff, 
        monadEffEff: monadEffEff
    };
})();
var PS = PS || {};
PS.Data_String = (function () {
    "use strict";
    var Data_Function = PS.Data_Function;
    var Data_Char = PS.Data_Char;
    var Prelude = PS.Prelude;
    var Data_String_Unsafe = PS.Data_String_Unsafe;
    var Data_Maybe = PS.Data_Maybe;
    
    function joinWith(s) {
      return function(xs) {
        return xs.join(s);
      };
    }
    ;
    return {
        joinWith: joinWith
    };
})();
var PS = PS || {};
PS.Network_Routing_Client = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Network_Routing_Client_Foreign = PS.Network_Routing_Client_Foreign;
    var Data_Function = PS.Data_Function;
    var Data_String = PS.Data_String;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Control_Monad_Eff_Class = PS.Control_Monad_Eff_Class;
    var Control_Monad_Eff_Unsafe = PS.Control_Monad_Eff_Unsafe;
    var Data_Array = PS.Data_Array;
    var Data_Maybe = PS.Data_Maybe;
    
function newRouter(director){
  return function NewRouterEff(){
    return director();
  }
};
    
function initRouter(d){
  return function InitRouterEff(){
    d.init('/');
    return {};
  }
};
    
function configureImpl(r, opts){
  return function ConfigureEff(){
    r.configure({'html5history': opts.historyAPI, 'notfound': opts.notFound});
    return {};
  }
};
    
function setRouteImpl(d, p){
  return function SetRouteEff(){
    d.setRoute(p);
    return {};
  }
};
    
function unsafeCoerce(a){
  return a;
};
    
function paramImpl(d,n,m){
  return function ParamEff(){
    d.param(n,m);
    return {};
  }
};
    
function routeImpl(d,p,f){
  return function RouteEff(){
    d.on(p,f);
    return {};
  }
};
    
function wrap0(f){
  return function Wrap0(){return f();}
};
    
function wrap1(f){
  return function Wrap1(a){
    var _this = this;
    var setRoute = function(route){
      return function(){
        _this.setRoute(route);
      }
    };
    return f(setRoute)(a)();
  }
};
    
function wrap2(f){
  return function Wrap2(a,b){
    var _this = this;
    var setRoute = function(route){
      return function(){
        _this.setRoute(route);
      }
    };
    return f(setRoute)(a)(b)();
  }
};
    
    /**
     *  | Path data type
     */
    var Exact = (function () {
        function Exact(value0) {
            this.value0 = value0;
        };
        Exact.create = function (value0) {
            return new Exact(value0);
        };
        return Exact;
    })();
    
    /**
     *  | Path data type
     */
    var Regex = (function () {
        function Regex(value0) {
            this.value0 = value0;
        };
        Regex.create = function (value0) {
            return new Regex(value0);
        };
        return Regex;
    })();
    
    /**
     *  | Path data type
     */
    var Param = (function () {
        function Param(value0) {
            this.value0 = value0;
        };
        Param.create = function (value0) {
            return new Param(value0);
        };
        return Param;
    })();
    
    /**
     *  | Path data type
     */
    var Any = (function () {
        function Any() {

        };
        Any.value = new Any();
        return Any;
    })();
    var Pathes = function (x) {
        return x;
    };
    
    /**
     *  | Callback Monad
     */
    var Callback = function (x) {
        return x;
    };
    
    /**
     *  | Routing Monad
     */
    var RoutingM = function (x) {
        return x;
    };
    
    /**
     *  | add path piece without parameter to pathes
     */
    var $minus$div = function (_472) {
        return function (_473) {
            return Prelude[":"](unsafeCoerce(_472))(_473);
        };
    };
    
    /**
     *  | add path piece with parameter to pathes
     */
    var $plus$div = function (_474) {
        return function (_475) {
            return Prelude[":"](unsafeCoerce(_474))(unsafeCoerce(_475));
        };
    };
    
    /**
     *  | set route in Callback monad.
     *  | convenient to redirect.
     */
    var setRoute = function (route_1) {
        return Callback(function (set) {
            return set(route_1);
        });
    };
    var runCallback = function (_469) {
        return _469;
    };
    
    /**
     *  | run Router Monad without initialize
     */
    var runRouter$prime = function (_468) {
        return function __do() {
            var _31 = newRouter(Network_Routing_Client_Foreign.director)();
            var _30 = _468({
                variableIndex: 0, 
                routerInstance: _31, 
                historyAPI: false, 
                notFound: Data_Maybe.Nothing.value
            })();
            (function () {
                if (_30.s.notFound instanceof Data_Maybe.Nothing) {
                    return configureImpl(_31, {
                        historyAPI: _30.s.historyAPI
                    });
                };
                if (_30.s.notFound instanceof Data_Maybe.Just) {
                    return configureImpl(_31, {
                        historyAPI: _30.s.historyAPI, 
                        notFound: runCallback(_30.s.notFound.value0)(function (s_1) {
                            return setRouteImpl(_31, s_1);
                        })
                    });
                };
                throw new Error("Failed pattern match");
            })()();
            return {
                setRoute: function (s_1) {
                    return setRouteImpl(_31, s_1);
                }, 
                init: initRouter(_31)
            };
        };
    };
    
    /**
     *  | run Router Monad
     */
    var runRouter = function (m) {
        return function __do() {
            var _29 = runRouter$prime(m)();
            _29.init();
            return _29.setRoute;
        };
    };
    
    /**
     *  | get regexed parameter from path piece
     */
    var regex = Regex.create;
    var pathToString = function (_470) {
        if (_470 instanceof Exact) {
            return _470.value0;
        };
        if (_470 instanceof Regex) {
            return "(" + (_470.value0 + ")");
        };
        if (_470 instanceof Param) {
            return _470.value0;
        };
        if (_470 instanceof Any) {
            return ":_";
        };
        throw new Error("Failed pattern match");
    };
    var pathesToString = function (_471) {
        return "/" + Data_String.joinWith("/")(Prelude["<$>"](Data_Array.functorArray)(pathToString)(_471));
    };
    var modifyState = function (f) {
        return RoutingM(function (s) {
            return Prelude["return"](Control_Monad_Eff.monadEff)({
                a: Prelude.unit, 
                s: f(s)
            });
        });
    };
    
    /**
     *  | set handler for route not match
     */
    var notFound = function (m) {
        return modifyState(function (s) {
            var _506 = {};
            for (var _507 in s) {
                if (s.hasOwnProperty(_507)) {
                    _506[_507] = s[_507];
                };
            };
            _506.notFound = new Data_Maybe.Just(m);
            return _506;
        });
    };
    var succIndex = modifyState(function (s) {
        var _508 = {};
        for (var _509 in s) {
            if (s.hasOwnProperty(_509)) {
                _508[_509] = s[_509];
            };
        };
        _508.variableIndex = s.variableIndex + 1;
        return _508;
    });
    var liftRoutingM = function (m) {
        return RoutingM(function (s) {
            return function __do() {
                var a = m();
                return {
                    a: a, 
                    s: s
                };
            };
        });
    };
    
    /**
     *  routing Monad methods
     */
    var getState = RoutingM(function (s) {
        return Prelude["return"](Control_Monad_Eff.monadEff)({
            a: s, 
            s: s
        });
    });
    var functorRoutingM = new Prelude.Functor(function (_476) {
        return function (_477) {
            return RoutingM(function (s) {
                return function __do() {
                    var n = _477(s)();
                    return {
                        a: _476(n.a), 
                        s: n.s
                    };
                };
            });
        };
    });
    var functorCallback = new Prelude.Functor(function (_482) {
        return function (_483) {
            return Callback(function (s) {
                return function __do() {
                    var n = _483(s)();
                    return _482(n);
                };
            });
        };
    });
    
    /**
     *  | add exact match for path piece
     */
    var exact = Exact.create;
    
    /**
     *  | empty path
     */
    var empty = [  ];
    var applyRoutingM = new Prelude.Apply(function (_478) {
        return function (_479) {
            return RoutingM(function (s) {
                return function __do() {
                    var _26 = _478(s)();
                    var _25 = _479(_26.s)();
                    return {
                        a: _26.a(_25.a), 
                        s: _25.s
                    };
                };
            });
        };
    }, function () {
        return functorRoutingM;
    });
    var bindRoutingM = new Prelude.Bind(function (_480) {
        return function (_481) {
            return RoutingM(function (s) {
                return function __do() {
                    var _28 = _480(s)();
                    var _27 = _481(_28.a);
                    return _27(_28.s)();
                };
            });
        };
    }, function () {
        return applyRoutingM;
    });
    var route = function (p) {
        return function (f) {
            return Prelude[">>="](bindRoutingM)(getState)(function (_37) {
                return liftRoutingM(routeImpl(_37.routerInstance, pathesToString(p), f));
            });
        };
    };
    
    /**
     *  | add routes which have no parameter
     */
    var routes0 = function (p) {
        return function (f) {
            return route(p)(Prelude["<$>"](Data_Array.functorArray)(wrap0)(f));
        };
    };
    
    /**
     *  | add route which have no parameter
     */
    var route0 = function (p) {
        return function (f) {
            return routes0(p)([ f ]);
        };
    };
    
    /**
     *  | add routes which have 1 parameter
     */
    var routes1 = function (p) {
        return function (f) {
            return route(p)(Prelude["<$>"](Data_Array.functorArray)(function (r) {
                return wrap1(function (set) {
                    return function (p1) {
                        return runCallback(r(p1))(set);
                    };
                });
            })(f));
        };
    };
    
    /**
     *  | add route which have 1 parameter
     */
    var route1 = function (p) {
        return function (f) {
            return routes1(p)([ f ]);
        };
    };
    
    /**
     *  | add routes which have 2 parameters
     */
    var routes2 = function (p) {
        return function (f) {
            return route(p)(Prelude["<$>"](Data_Array.functorArray)(function (r) {
                return wrap2(function (set) {
                    return function (p1) {
                        return function (p2) {
                            return runCallback(r(p1)(p2))(set);
                        };
                    };
                });
            })(f));
        };
    };
    
    /**
     *  | add route which have 2 parameters
     */
    var route2 = function (p) {
        return function (f) {
            return routes2(p)([ f ]);
        };
    };
    var applyCallback = new Prelude.Apply(function (_484) {
        return function (_485) {
            return Callback(function (s) {
                return function __do() {
                    var _33 = _484(s)();
                    var _32 = _485(s)();
                    return _33(_32);
                };
            });
        };
    }, function () {
        return functorCallback;
    });
    var bindCallback = new Prelude.Bind(function (_486) {
        return function (_487) {
            return Callback(function (s) {
                return function __do() {
                    var _35 = _486(s)();
                    var _34 = _487(_35);
                    return _34(s)();
                };
            });
        };
    }, function () {
        return applyCallback;
    });
    var applicativeRoutingM = new Prelude.Applicative(function () {
        return applyRoutingM;
    }, function (a) {
        return RoutingM(function (s) {
            return Prelude["return"](Control_Monad_Eff.monadEff)({
                a: a, 
                s: s
            });
        });
    });
    var monadRoutingM = new Prelude.Monad(function () {
        return applicativeRoutingM;
    }, function () {
        return bindRoutingM;
    });
    
    /**
     *  | create parameter in pathes
     */
    var param = function (v) {
        return Prelude[">>="](bindRoutingM)(getState)(function (_36) {
            var n = ":v" + Prelude.show(Prelude.showNumber)(_36.variableIndex);
            return Prelude[">>="](bindRoutingM)(liftRoutingM(paramImpl(_36.routerInstance, n, pathToString(v))))(function () {
                return Prelude[">>="](bindRoutingM)(succIndex)(function () {
                    return Prelude["return"](monadRoutingM)(new Param(n));
                });
            });
        });
    };
    var applicativeCallback = new Prelude.Applicative(function () {
        return applyCallback;
    }, function (a) {
        return Callback(function (_466) {
            return Prelude["return"](Control_Monad_Eff.monadEff)(a);
        });
    });
    var monadCallback = new Prelude.Monad(function () {
        return applicativeCallback;
    }, function () {
        return bindCallback;
    });
    var monadEffCallback = new Control_Monad_Eff_Class.MonadEff(function () {
        return monadCallback;
    }, function (m) {
        return Callback(function (_467) {
            return m;
        });
    });
    
    /**
     *  | get any parameter from path piece
     */
    var any = Any.value;
    return {
        route2: route2, 
        route1: route1, 
        route0: route0, 
        routes2: routes2, 
        routes1: routes1, 
        routes0: routes0, 
        param: param, 
        "+/": $plus$div, 
        "-/": $minus$div, 
        regex: regex, 
        any: any, 
        exact: exact, 
        empty: empty, 
        notFound: notFound, 
        setRoute: setRoute, 
        "runRouter'": runRouter$prime, 
        runRouter: runRouter, 
        functorRoutingM: functorRoutingM, 
        applyRoutingM: applyRoutingM, 
        applicativeRoutingM: applicativeRoutingM, 
        bindRoutingM: bindRoutingM, 
        monadRoutingM: monadRoutingM, 
        functorCallback: functorCallback, 
        applyCallback: applyCallback, 
        applicativeCallback: applicativeCallback, 
        bindCallback: bindCallback, 
        monadCallback: monadCallback, 
        monadEffCallback: monadEffCallback
    };
})();
var PS = PS || {};
PS.Main = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Network_Routing_Client = PS.Network_Routing_Client;
    var Control_Monad_Eff_Class = PS.Control_Monad_Eff_Class;
    var Debug_Trace = PS.Debug_Trace;
    var Data_Function = PS.Data_Function;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    
function onDOMConentLoaded(f){
  return function Eff(){
    document.addEventListener("DOMContentLoaded", function(){f()});
  }
};
    
function attachOnClickById(id, fn) {
  return function Eff(){
    document.getElementById(id).addEventListener('click', function(){
      fn();
    });
  }
};
    var main = function __do() {
        var _40 = Network_Routing_Client.runRouter(Prelude[">>="](Network_Routing_Client.bindRoutingM)(Network_Routing_Client.param(Network_Routing_Client.exact("api")))(function (_39) {
            return Prelude[">>="](Network_Routing_Client.bindRoutingM)(Network_Routing_Client.param(Network_Routing_Client.regex("[0-9]+")))(function (_38) {
                return Prelude[">>="](Network_Routing_Client.bindRoutingM)(Network_Routing_Client.route0(Network_Routing_Client.empty)(Control_Monad_Eff_Class.liftEff(Control_Monad_Eff_Class.monadEffEff)(Debug_Trace.trace("root"))))(function () {
                    return Prelude[">>="](Network_Routing_Client.bindRoutingM)(Network_Routing_Client.route0(Network_Routing_Client["-/"](_39)(Network_Routing_Client.empty))(Control_Monad_Eff_Class.liftEff(Control_Monad_Eff_Class.monadEffEff)(Debug_Trace.trace("api"))))(function () {
                        return Prelude[">>="](Network_Routing_Client.bindRoutingM)(Network_Routing_Client.route1(Network_Routing_Client["-/"](_39)(Network_Routing_Client["+/"](_38)(Network_Routing_Client.empty)))(function (n) {
                            return Prelude[">>="](Network_Routing_Client.bindCallback)(Control_Monad_Eff_Class.liftEff(Network_Routing_Client.monadEffCallback)(Debug_Trace.trace("api number: " + n)))(function () {
                                var _536 = n === "1";
                                if (_536) {
                                    return Prelude[">>="](Network_Routing_Client.bindCallback)(Control_Monad_Eff_Class.liftEff(Network_Routing_Client.monadEffCallback)(Debug_Trace.trace("redirect to /")))(function () {
                                        return Network_Routing_Client.setRoute("/");
                                    });
                                };
                                if (!_536) {
                                    return Prelude["return"](Network_Routing_Client.monadCallback)(Prelude.unit);
                                };
                                throw new Error("Failed pattern match");
                            });
                        }))(function () {
                            return Prelude[">>="](Network_Routing_Client.bindRoutingM)(Network_Routing_Client.route2(Network_Routing_Client["-/"](_39)(Network_Routing_Client["-/"](Network_Routing_Client.exact("show"))(Network_Routing_Client["+/"](_38)(Network_Routing_Client["+/"](Network_Routing_Client.any)(Network_Routing_Client.empty)))))(function (i) {
                                return function (a) {
                                    return Control_Monad_Eff_Class.liftEff(Network_Routing_Client.monadEffCallback)(Debug_Trace.trace("api show: " + (i + (", " + a))));
                                };
                            }))(function () {
                                return Network_Routing_Client.notFound(Prelude[">>="](Network_Routing_Client.bindCallback)(Control_Monad_Eff_Class.liftEff(Network_Routing_Client.monadEffCallback)(Debug_Trace.trace("not found")))(function () {
                                    return Network_Routing_Client.setRoute("/");
                                }));
                            });
                        });
                    });
                });
            });
        }))();
        return onDOMConentLoaded(function __do() {
            attachOnClickById("root", _40("/"))();
            attachOnClickById("api", _40("/api"))();
            attachOnClickById("api-1", _40("/api/1"))();
            attachOnClickById("api-12", _40("/api/12"))();
            attachOnClickById("api-bad", _40("/api/bad"))();
            return attachOnClickById("api-show", _40("/api/show/12/cat"))();
        })();
    };
    return {
        main: main
    };
})();
PS.Main.main();

